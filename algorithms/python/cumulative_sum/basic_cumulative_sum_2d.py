# 2次元累積和の実装メモ（Prefix Sum 2D）

# --------------------------------------------------
# 【1】0埋めありの2次元累積和（sのサイズを+1しておく）
# --------------------------------------------------
def build_2d_prefix_sum_with_padding(a):
    """
    与えられた2次元配列aに対し、累積和を0埋め付きで構築する。
    s[i+1][j+1] = a[0][0]〜a[i][j]の和を表す。
    """
    n, m = len(a), len(a[0])
    s = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(n):
        for j in range(m):
            s[i+1][j+1] = s[i+1][j] + s[i][j+1] - s[i][j] + a[i][j]
    return s

def query_2d_sum_with_padding(s, x1, y1, x2, y2):
    """
    区間 (x1, y1) 〜 (x2, y2) の矩形領域の和を返す。
    x1, y1, x2, y2 は0-indexedで指定。閉区間。
    """
    return s[x2+1][y2+1] - s[x2+1][y1] - s[x1][y2+1] + s[x1][y1]


# --------------------------------------------------
# 【2】0埋めなしの2次元累積和（sを別途構築、式で統一）
# --------------------------------------------------

def build_2d_prefix_sum_no_padding(a):
    """
    与えられた2次元配列aに対し、0埋めなしで累積和を構築する。
    s[i][j] = a[0][0]〜a[i][j]の和を表す。
    """
    n, m = len(a), len(a[0])
    s = [[0] * m for _ in range(n)]

    # 1行目（i=0）の累積和を計算
    s[0][0] = a[0][0]
    for j in range(1, m):
        s[0][j] = s[0][j-1] + a[0][j]

    # 1列目（j=0）の累積和を計算
    for i in range(1, n):
        s[i][0] = s[i-1][0] + a[i][0]

    # 残りの領域に対して、式を適用して構築
    for i in range(1, n):
        for j in range(1, m):
            s[i][j] = (
                s[i][j-1] +         # 左の累積
                s[i-1][j] -         # 上の累積
                s[i-1][j-1] +       # 左上の重複を除いて
                a[i][j]             # 現在地を加える
            )

    return s

# --------------------------------------------------
# 【補足】
# s[i][j] = s[i][j-1] + s[i-1][j] - s[i-1][j-1] + a[i][j] は、先頭に0を用意しないバージョンの構築式。
# --------------------------------------------------
