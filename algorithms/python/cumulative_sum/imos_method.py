"""
いもす法（差分配列を使った区間加算）の実装メモ

■目的
長い配列に対して複数の区間加算を効率的に行い、
最終的な配列を求める。

■考え方
- 元の配列aは0で初期化されている。
- 区間[l, r]に値xを加える操作をq回行う。
- 毎回全区間を足していくのは計算コストが高いので、
  差分配列（いもす配列）を使う。

■手順
1. 差分配列aを用意（元配列のサイズ+1）
2. 区間加算操作は、
   - a[l]にxを足す（区間開始の印）
   - a[r+1]に-xを足す（区間終了の次の位置で打ち消し）
3. すべての加算を差分配列にまとめて記録したあと、
   一度だけ累積和を計算することで
   最終的な配列を得る。

■計算量
q回の区間加算をO(q)で記録し、
累積和を1回O(n)で計算するため
合計O(n + q)で高速。

"""

def print_array(a, n):
    print(*a[:n])

# 入力例:
# n: 配列の長さ
# q: 区間加算の回数
n, q = map(int, input().split())
a = [0] * (n + 1)  # 差分配列用に1つ余裕を持たせる

for _ in range(q):
    l, r, x = map(int, input().split())
    a[l] += x          # 区間開始に加算
    if r + 1 <= n:
        a[r + 1] -= x  # 区間終了の次で打ち消し

# 差分配列から累積和を計算し最終配列に変換
for i in range(1, n):
    a[i] += a[i - 1]

print_array(a, n)
