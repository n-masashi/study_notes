"""
いもす法（差分配列を使った区間加算）の実装メモ

■目的
長い配列に対して複数の区間加算を効率的に行い、
最終的な配列を求める。

■考え方
- 元の配列aは0で初期化されている。
- 区間[l, r]に値xを加える操作をq回行う。
- 毎回全区間を足していくのは計算コストが高いので、
  差分配列（いもす配列）を使う。

■手順
1. 差分配列aを用意（元配列のサイズ+1）
2. 区間加算操作は、
   - a[l]にxを足す（区間開始の印）
   - a[r+1]に-xを足す（区間終了の次の位置で打ち消し）
3. すべての加算を差分配列にまとめて記録したあと、
   一度だけ累積和を計算することで
   最終的な配列を得る。

■計算量
q回の区間加算をO(q)で記録し、
累積和を1回O(n)で計算するため
合計O(n + q)で高速。

"""

def print_array(a, n):
    print(*a[:n])

# 入力例:
# n: 配列の長さ
# q: 区間加算の回数
n, q = map(int, input().split())
a = [0] * (n + 1)  # 差分配列用に1つ余裕を持たせる

for _ in range(q):
    l, r, x = map(int, input().split())
    a[l] += x          # 区間開始に加算
    if r + 1 <= n:
        a[r + 1] -= x  # 区間終了の次で打ち消し

# 差分配列から累積和を計算し最終配列に変換
for i in range(1, n):
    a[i] += a[i - 1]

print_array(a, n)


"""
2次元いもす法（差分配列を使った矩形領域の加算）の実装メモ

■目的
2次元配列の特定の矩形範囲に対して値を加算する操作を複数回行い、
最終的な配列を効率よく求める。

■考え方
- 元の2次元配列aはすべて0で初期化。
- 矩形範囲の左上(x1,y1)、右下(x2,y2)に値xを加える操作をq回行う。
- 各操作を差分配列に記録し、最後に累積和を2回（横方向・縦方向）計算することで
  全加算の結果を効率的に得る。

■差分配列の更新方法
矩形の四隅に以下のように加算・減算を行う：
- a[x1][y1] += x       # 矩形左上に加算
- a[x1][y2+1] -= x     # 矩形右隣の列で減算（範囲外を打ち消す）
- a[x2+1][y1] -= x     # 矩形下隣の行で減算
- a[x2+1][y2+1] += x   # 右下の交差点で加算（減算の重複を補正）

■最終配列の算出手順
1. 横方向に累積和を計算（左→右）
2. 縦方向に累積和を計算（上→下）

■計算量
q回の矩形更新をO(q)で差分配列に反映し、
累積和を2回O(n*m)で計算するため、
合計で高速に処理可能。

"""

def print_2d_array(a, n, m):
    # n行m列分の2次元配列を行単位で空白区切りで出力
    print("\n".join(" ".join(map(str, row[:m])) for row in a[:n]))


# 入力例:
# n, m: 配列の行数・列数
# q: 更新操作の回数
n, m, q = map(int, input().split())

# 差分配列aは(n+1)×(m+1)で用意し、余裕を持つ
a = [[0] * (m + 1) for _ in range(n + 1)]

for _ in range(q):
    x1, y1, x2, y2, x = map(int, input().split())
    # 矩形の4隅に加算・減算を行う
    a[x1][y1] += x
    if y2 + 1 <= m:
        a[x1][y2 + 1] -= x
    if x2 + 1 <= n:
        a[x2 + 1][y1] -= x
    if x2 + 1 <= n and y2 + 1 <= m:
        a[x2 + 1][y2 + 1] += x

# 横方向に累積和を計算
for i in range(n):
    for j in range(1, m):
        a[i][j] += a[i][j - 1]

# 縦方向に累積和を計算
for j in range(m):
    for i in range(1, n):
        a[i][j] += a[i - 1][j]

# 最終結果の出力
print_2d_array(a, n, m)
