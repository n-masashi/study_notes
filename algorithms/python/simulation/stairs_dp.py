# coding: utf-8
# ============================================
# 階段の登り方（DP基礎）
# --------------------------------------------
# 階段の段数 n が与えられ、1段または2段ずつ
# 上ることができるとき、n段までの登り方の数を
# 求める問題。
#
# ・dp配列を使い、dp[i]に「i段目までの
#   登り方の数」を格納する。
# ・dp[i] = dp[i-1] + dp[i-2] の漸化式で解く。
#
# 入力：
# ・階段の段数 n（1 <= n <= 40）
#
# 出力：
# ・n段目までの登り方の数
#
# --------------------------------------------
# ▼ ポイントと理解の補足
# --------------------------------------------
# 1. n段目へは、
#    - n-1段目から1段上る方法
#    - n-2段目から2段上る方法
#    の2通りの到達方法がある。
#
# 2. dp[0] = 1 とするのは、
#    「0段目（最初の位置）にいる方法は1通り（何もしない）」
#    と考えるため。
#
# 3. これにより漸化式 dp[i] = dp[i-1] + dp[i-2] が成立。
#
# 4. 初期値 dp[1] = 1 も明示的に設定し、
#    1段目までの登り方は1通り（1段上るだけ）。
#
# 5. ループは2からnまで回し、各段数の登り方数を
#    順次求めていく。
# ============================================

stairs = int(input())
ans = [0] * (40 + 1)
ans[0] = 1
ans[1] = 1

for i in range(2, stairs + 1):
    ans[i] = ans[i-1] + ans[i-2]

print(ans[stairs])

# ============================================
# ▼ メモ
# --------------------------------------------
# ・漸化式やDPを学ぶ際に、問題の状態や意味をしっかり考え、配列の初期値とループ範囲を間違えないことが重要
# ・他のパターンにも応用可能な基本形なので覚えておくと良さげ
# ============================================

# ============================================
# 応用
# 整数 n, a, b, c が与えられます。
# 階段を上るのに、1歩で a 段または b 段または c 段を上ることができるとき、n 段の階段を上る方法は何通りあるでしょうか。
# ============================================

# coding: utf-8
n, a, b, c = map(int,input().split())
ans = [0] * (30 + 1) 
ans[0] = 1

for i in range(1, 30 + 1):
    if i - a >= 0:
        ans[i] += ans[i - a]

    if i - b >= 0:
        ans[i] += ans[i - b]
        
    if i - c >= 0:
        ans[i] += ans[i - c]   

print(ans[n])     
