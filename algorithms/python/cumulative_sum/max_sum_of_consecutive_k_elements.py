# -----------------------------------
# 問題：
# 整数 n, k と長さ n の配列 a が与えられる。
# 連続する k 個の要素の和の最大値を求めよ。
#
# ここでは2つの方法を示します。
# 1. 累積和を使う方法
# 2. スライディングウィンドウ（累積和を使わない）方法

# 入力の受け取り
n, k = map(int, input().split())
a = list(map(int, input().split()))

# -------------------------------
# 方法①：累積和を使う
# -------------------------------

s = [0] * (n + 1)
for i in range(n):
    s[i + 1] = s[i] + a[i]

max_sum = 0
for i in range(n - k + 1):
    total = s[i + k] - s[i]
    if total > max_sum:
        max_sum = total

print(max_sum)

# -------------------------------
# 方法②：スライディングウィンドウ（累積和なし）
# -------------------------------

# 最初の k 個の和を計算
current_sum = sum(a[:k])
max_sum2 = current_sum

for i in range(k, n):
    current_sum = current_sum - a[i - k] + a[i]
    if current_sum > max_sum2:
        max_sum2 = current_sum

print(max_sum2)

# -----------------------------------
# まとめ：2つの方法の違い
# -----------------------------------
# ・累積和は配列の部分和を高速に計算でき、任意の区間和をO(1)で取得できる。
#   → 複数の区間和を繰り返し計算する問題に強い。
#   → 余分に O(n) のメモリを使う。
#
# ・スライディングウィンドウは固定長の区間和を1つずつ更新して計算する方法。
#   → メモリ効率が良く、計算も速い。
#   → ただし任意区間の和を求める用途には向かない。
#
# どちらも計算量は O(n) ですが、
# スライディングウィンドウの方が実装も短くてメモリも節約できるので、
# 「連続k個だけ」の区間和最大値問題にはこちらがよく使われru
