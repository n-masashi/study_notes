# coding: utf-8
# ============================================
# DPによるりんご購入最小費用計算（2個・5個購入可）
# --------------------------------------------
# 八百屋でりんごを2個単位（a円）または5個単位（b円）で購入可能。
# 必要な個数nに対して、買いすぎOKの条件下で最小購入金額を求める。
#
# 入力：
# ・n：必要なりんごの個数（1 ≦ n ≦ 1,000）
# ・a：2個買いの値段（1 ≦ a < b ≦ 10,000）
# ・b：5個買いの値段
#
# 出力：
# ・n個以上のりんごを得るのに必要な最小金額
#
# --------------------------------------------
# ▼ 実装ポイントと引っ掛かった点
# --------------------------------------------
# 1. DPテーブルの範囲は「n + max(2,5)」まで
#    - ちょうどn個ではなく、n+1個以上買ってもよいため
#    - 最小値探索の際は dp[n:] を対象にする
#
# 2. 買えない個数の初期値はINF（float('inf')）を使用
#    - Pythonでは INF に何を足しても INF → min比較で無視される
#
# 3. 購入ルートは「2個前＋a円」「5個前＋b円」の最小値を選択
#    - 例：dp[7] = min(dp[5] + a, dp[2] + b)
# ============================================

n, a, b = map(int, input().split())
INF = float('inf')
dp = [INF] * (n + 5)  # +5まで必要（最大5個買いの可能性）

dp[0] = 0  # 初期状態（0個買うのに0円）

for i in range(1, n + 5):
    if i - 2 >= 0:
        dp[i] = min(dp[i], dp[i - 2] + a)
    if i - 5 >= 0:
        dp[i] = min(dp[i], dp[i - 5] + b)

print(min(dp[n:n + 5]))  # n～n+4の中で最小値を探す
